# ==============================================
# BACKEND ENVIRONMENT VARIABLES EXAMPLE
# ==============================================
# Copy this file to .env and fill in your actual values
# NEVER commit .env files to git - they contain sensitive information!

# ==============================================
# ENVIRONMENT CONFIGURATION
# ==============================================
NODE_ENV=development
# Options: development, production
# - development: Shows detailed errors, uses localhost
# - production: Optimized for deployment, security enabled

PORT=5000
# The port your backend server runs on
# Default: 5000 (matches frontend expectation)

# ==============================================
# DATABASE CONNECTION
# ==============================================
MONGO_URI=mongodb+srv://your_username:your_password@cluster0.xxxxx.mongodb.net/your_database?retryWrites=true&w=majority
# üìç WHERE TO GET:
# 1. Go to https://cloud.mongodb.com/
# 2. Create account/login
# 3. Create a cluster (free tier available)
# 4. Click "Connect" ‚Üí "Connect your application"
# 5. Copy the connection string and replace:
#    - <username> with your database username
#    - <password> with your database password
#    - <database> with your database name

# ==============================================
# AUTHENTICATION & SECURITY
# ==============================================
JWT_SECRET=your_super_secret_jwt_key_here_make_it_long_and_random
# üìç WHERE TO GET:
# Generate a random string (at least 32 characters)
# You can use: https://passwordsgenerator.net/ or run in terminal:
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

# ==============================================
# PAYMENT INTEGRATION (OPTIONAL)
# ==============================================
PAYPAL_CLIENT_ID=your_paypal_client_id_here
# üìç WHERE TO GET:
# 1. Go to https://developer.paypal.com/
# 2. Create account/login
# 3. Create an app in dashboard
# 4. Copy the Client ID

# ==============================================
# GOOGLE SERVICES
# ==============================================
GOOGLE_CLIENT_ID=your_google_oauth_client_id
# üìç WHERE TO GET:
# 1. Go to https://console.cloud.google.com/
# 2. Create project ‚Üí APIs & Services ‚Üí Credentials
# 3. Create OAuth 2.0 Client ID
# 4. Copy the Client ID

GOOGLE_CLIENT_SECRET=your_google_oauth_client_secret
# üìç WHERE TO GET: Same as above, copy the Client Secret

GOOGLE_REDIRECT_URI=https://your-frontend-url.vercel.app
# The URL where Google redirects after authentication
# Set this to your frontend URL

# ==============================================
# GOOGLE AI API KEYS (Multi-Key Support)
# ==============================================
# Primary API key (required)
GOOGLE_AI_API_KEY_1=your_first_google_ai_api_key
# Secondary API key (optional - automatic failover when primary exceeds quota)
GOOGLE_AI_API_KEY_2=your_second_google_ai_api_key
# Tertiary API key (optional - additional backup)
GOOGLE_AI_API_KEY_3=your_third_google_ai_api_key

# Legacy single key (fallback support - will use if KEY_1 not set)
GOOGLE_AI_API_KEY=your_google_ai_api_key

# üìç WHERE TO GET MULTIPLE API KEYS:
# 1. Go to https://makersuite.google.com/app/apikey
# 2. Sign in with Google account
# 3. Click "Create API Key" for first key
# 4. For additional keys, either:
#    - Use same account to create more keys, OR
#    - Use different Google accounts for higher quotas
# 5. Copy each generated key to KEY_1, KEY_2, KEY_3
# 
# üî• BENEFITS OF MULTIPLE KEYS:
# - Automatic failover when quota exceeded
# - Higher daily usage limits
# - Uninterrupted AI analysis service
# - Load distribution across keys
# 
# üéØ RECOMMENDED SETUP:
# - At least 2 keys for redundancy
# - 3 keys for high-volume applications
# - Keys from different accounts for maximum quota

# ==============================================
# CLOUDINARY (IMAGE STORAGE)
# ==============================================
CLOUDINARY_CLOUD_NAME=your_cloudinary_cloud_name
CLOUDINARY_API_KEY=your_cloudinary_api_key
CLOUDINARY_API_SECRET=your_cloudinary_api_secret
CLOUDINARY_UPLOAD_PRESET=your_cloudinary_upload_preset
# üìç WHERE TO GET:
# 1. Go to https://cloudinary.com/
# 2. Create account/login
# 3. Go to Dashboard
# 4. Copy Cloud Name, API Key, API Secret
# 5. Go to Settings ‚Üí Upload ‚Üí Add upload preset
# 6. Copy the preset name

# ==============================================
# FRONTEND CONNECTION (DEPLOYMENT ONLY)
# ==============================================
FRONTEND_URL=https://your-frontend-url.vercel.app
# Only needed for production deployment
# Set this to your actual frontend Vercel URL
# Used for CORS and redirects

# ==============================================
# VERCEL DEPLOYMENT FLAG (AUTOMATICALLY SET)
# ==============================================
# VERCEL=1
# This is automatically set by Vercel, don't add manually

# ==============================================
# OPTIONAL SETTINGS
# ==============================================
PAGINATION_LIMIT=40
# How many items to show per page in admin panels
# Default: 40

# ==============================================
# NOTES FOR DEPLOYMENT:
# ==============================================
# üöÄ FOR VERCEL DEPLOYMENT:
# 1. Don't upload .env file to git
# 2. Set all these variables in Vercel Dashboard:
#    Project ‚Üí Settings ‚Üí Environment Variables
# 3. Make sure to set NODE_ENV=production in Vercel
# 4. Use your actual domain URLs, not localhost
